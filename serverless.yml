service: CartService

provider:
  name: aws
  runtime: nodejs12.x
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'eu-west-2'}
  host: ${file(./config/${self:provider.stage}.json):database.host}
  port: ${file(./config/${self:provider.stage}.json):database.port}
  database: ${file(./config/${self:provider.stage}.json):database.database}
  username: ${file(./config/${self:provider.stage}.json):database.username}
  password: ${file(./config/${self:provider.stage}.json):database.password}
  cognito-arn: ${file(./config/${self:provider.stage}.json):cognito-arn}
  logRetentionInDays: 7
#   tracing:
#     lambda: true
#     apiGateway: true
  logs:
    restApi: true
  vpc:
    securityGroupIds: ${file(./config/${self:provider.stage}.json):securityGroupIds}
    subnetIds: ${file(./config/${self:provider.stage}.json):subnetIds}
package:
  individually: true
  excludeDevDependencies: true
  exclude:
    - test/**
    - .git/**
    - .serverless/**
    - coverage/**
    - README.md
    - TODO.md
    - LICENSE

functions:
  upsertCartItem:
    name: upsertCartItem-${self:provider.stage}
    role: CartFunctionsLambdaRole
    handler: src/cart-item/upsertCartItem.fun
    memorySize: 128
    timeout: 10
    environment:
      HOST: ${self:provider.host}
      PORT: ${self:provider.port}
      DATABASE: ${self:provider.database}
      USERNAME: ${self:provider.username}
      PASSWORD: ${self:provider.password}
    tags:
      purpose: lambda function to upsert cart item
    events:
      - http:
          path: /cart/item
          method: post
          integration: lambda
          authorizer:
            name: authorizer
            arn: ${self:provider.cognito-arn}
            claims:
              - phone_number
          cors:
            origins:
              - '*'
            headers:
              - Content-Type
              - Authorization
  getCartItems:
    name: getCartItems-${self:provider.stage}
    role: CartFunctionsLambdaRole
    handler: src/cart-item/getCartItems.fun
    memorySize: 128
    timeout: 10
    environment:
      HOST: ${self:provider.host}
      PORT: ${self:provider.port}
      DATABASE: ${self:provider.database}
      USERNAME: ${self:provider.username}
      PASSWORD: ${self:provider.password}
    tags:
      purpose: lambda function to get cart items
    events:
      - http:
          path: /cart/items
          method: get
          integration: lambda
          authorizer:
            name: authorizer
            arn: ${self:provider.cognito-arn}
            claims:
              - phone_number
          cors:
            origins:
              - '*'
            headers:
              - Content-Type
              - Authorization
  getInCartItems:
    name: getInCartItems-${self:provider.stage}
    role: CartFunctionsLambdaRole
    handler: src/cart-item/getInCartItems.fun
    memorySize: 128
    timeout: 10
    environment:
      HOST: ${self:provider.host}
      PORT: ${self:provider.port}
      DATABASE: ${self:provider.database}
      USERNAME: ${self:provider.username}
      PASSWORD: ${self:provider.password}
    tags:
      purpose: lambda function to get in cart items
    events:
      - http:
          path: /cart/in-cart-items
          method: get
          integration: lambda
          authorizer:
            name: authorizer
            arn: ${self:provider.cognito-arn}
            claims:
              - phone_number
          cors:
            origins:
              - '*'
            headers:
              - Content-Type
              - Authorization
  getSavedForLaterCartItems:
    name: getSavedForLaterCartItems-${self:provider.stage}
    role: CartFunctionsLambdaRole
    handler: src/cart-item/getSavedForLaterCartItems.fun
    memorySize: 128
    timeout: 10
    environment:
      HOST: ${self:provider.host}
      PORT: ${self:provider.port}
      DATABASE: ${self:provider.database}
      USERNAME: ${self:provider.username}
      PASSWORD: ${self:provider.password}
    tags:
      purpose: lambda function to get getSavedForLaterCartItems cart items
    events:
      - http:
          path: /cart/saved-for-later-items
          method: get
          integration: lambda
          authorizer:
            name: authorizer
            arn: ${self:provider.cognito-arn}
            claims:
              - phone_number
          cors:
            origins:
              - '*'
            headers:
              - Content-Type
              - Authorization
  upsertCartItems:
    name: upsertCartItems-${self:provider.stage}
    role: CartFunctionsLambdaRole
    handler: src/cart-item/upsertCartItems.fun
    memorySize: 128
    timeout: 10
    environment:
      HOST: ${self:provider.host}
      PORT: ${self:provider.port}
      DATABASE: ${self:provider.database}
      USERNAME: ${self:provider.username}
      PASSWORD: ${self:provider.password}
    tags:
      purpose: lambda function to upsert cart items
    events:
      - http:
          path: /cart/items
          method: post
          integration: lambda
          authorizer:
            name: authorizer
            arn: ${self:provider.cognito-arn}
            claims:
              - phone_number
          cors:
            origins:
              - '*'
            headers:
              - Content-Type
              - Authorization
  deleteCartItem:
    name: deleteCartItem-${self:provider.stage}
    role: CartFunctionsLambdaRole
    handler: src/cart-item/deleteCartItem.fun
    memorySize: 128
    timeout: 10
    environment:
      HOST: ${self:provider.host}
      PORT: ${self:provider.port}
      DATABASE: ${self:provider.database}
      USERNAME: ${self:provider.username}
      PASSWORD: ${self:provider.password}
    tags:
      purpose: lambda function to delete cart item
    events:
      - http:
          path: /cart/item/{id}
          method: delete
          request:
            parameters:
              paths:
                id: true
          integration: lambda
          authorizer:
            name: authorizer
            arn: ${self:provider.cognito-arn}
            claims:
              - phone_number
          cors:
            origins:
              - '*'
            headers:
              - Content-Type
              - Authorization
  deleteInCartItems:
    name: deleteInCartItems-${self:provider.stage}
    role: CartFunctionsLambdaRole
    handler: src/cart-item/deleteInCartItems.fun
    memorySize: 128
    timeout: 10
    environment:
      HOST: ${self:provider.host}
      PORT: ${self:provider.port}
      DATABASE: ${self:provider.database}
      USERNAME: ${self:provider.username}
      PASSWORD: ${self:provider.password}
    tags:
      purpose: lambda function to delete in cart items
    events:
      - http:
          path: /cart/in-items
          method: delete
          integration: lambda
          authorizer:
            name: authorizer
            arn: ${self:provider.cognito-arn}
            claims:
              - phone_number
          cors:
            origins:
              - '*'
            headers:
              - Content-Type
              - Authorization

resources:
  Resources:
    CartFunctionsLambdaRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: "sts:AssumeRole"
        Path: /
        Policies:
          - PolicyName: logs
            PolicyDocument:
              Statement:
                Effect: Allow
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "arn:aws:logs:*:*:*"
          - PolicyName: lambda
            PolicyDocument:
              Statement:
                Effect: Allow
                Action:
                  - "lambda:InvokeFunction"
                Resource: "*"
          - PolicyName: VPCAccess
            PolicyDocument:
              Statement:
                Effect: Allow
                Action:
                  - "ec2:CreateNetworkInterface"
                  - "ec2:DescribeNetworkInterfaces"
                  - "ec2:DeleteNetworkInterface"
                Resource: "*"
